#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define U_TAPPING_TERM 200

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESC               &kp Q  &kp W  &kp E  &kp R      &kp T               &kp Y             &kp U      &kp I      &kp O    &kp P          &kp DELETE
&u_mt TAB LEFT_SHIFT  &kp A  &kp S  &kp D  &kp F      &kp G               &kp H             &kp J      &kp K      &kp L    &kp SEMICOLON  &kp BACKSPACE
&kp LEFT_CONTROL      &kp Z  &kp X  &kp C  &kp V      &kp B               &kp N             &kp M      &kp COMMA  &kp DOT  &kp FSLH       &mo 5
                                    &mo 4  &kp SPACE  &lt 2 LANGUAGE_1    &lt 1 LANGUAGE_2  &kp ENTER
            >;
        };

        Sym {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH  &kp DOLLAR    &kp PERCENT  &kp AMPERSAND            &kp ASTERISK  &kp N7        &kp N8        &kp N9        &kp CARET  &kp F1
&kp PIPE         &kp AT_SIGN        &trans    &kp UP_ARROW  &trans       &kp LEFT_PARENTHESIS     &kp MINUS     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0     &kp F2
&kp UNDER        &kp SQT            &kp LEFT  &kp DOWN      &kp RIGHT    &kp RIGHT_PARENTHESIS    &kp PLUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL  &kp F3
                                              &trans        &trans       &trans                   &trans        &trans
            >;
        };

        Num_Fun {
            bindings = <
&bt BT_CLR  &none         &kp F1       &kp F2      &kp F3  &kp F4    &kp ASTERISK  &kp N7        &kp N8        &kp N9        &kp SLASH  &kp NON_US_BACKSLASH
&trans      &trans        &bt BT_PRV   &bt BT_NXT  &trans  &trans    &kp MINUS     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0     &kp CARET
&trans      &out OUT_TOG  &bootloader  &trans      &trans  &trans    &kp PLUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL  &kp TILDE
                                       &trans      &trans  &trans    &trans        &trans
            >;
        };

        FUN {
            bindings = <
&trans  &trans   &kp F1  &kp F2   &kp F3   &kp F4     &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&trans  &kp DEL  &kp F5  &kp F6   &kp F7   &kp F8     &out OUT_TOG  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &kp LALT
&trans  &trans   &kp F9  &kp F10  &kp F11  &kp F12    &trans        &trans            &trans             &trans           &trans        &to 0
                         &trans   &trans   &trans     &trans        &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp LCLK  &trans  &mkp RCLK  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans  &trans     &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
