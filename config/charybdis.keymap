#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define U_TAPPING_TERM 200

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESC               &kp Q  &kp W  &kp E         &kp R        &kp T               &kp Y             &kp U      &kp I      &kp O    &kp P     &kp DELETE
&u_mt LEFT_SHIFT TAB  &kp A  &kp S  &kp D         &kp F        &kp G               &kp H             &kp J      &kp K      &kp L    &kp SEMI  &kp BACKSPACE
&kp LEFT_CONTROL      &kp Z  &kp X  &kp C         &kp V        &kp B               &kp N             &kp M      &kp COMMA  &kp DOT  &kp FSLH  &mkp LCLK
                                    &kp LEFT_ALT  &lt 4 SPACE  &lt 2 LANGUAGE_1    &lt 1 LANGUAGE_2  &kp ENTER
            >;
        };

        Sym {
            bindings = <
&kp EXCLAMATION  &kp AT    &kp HASH           &kp DOLLAR    &kp PERCENT   &kp AMPS    &bt BT_SEL 0          &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&kp PIPE2        &none     &kp C_VOLUME_DOWN  &kp UP_ARROW  &kp C_VOL_UP  &kp LPAR    &kp RBKT              &kp LESS_THAN     &kp RBRC      &none         &none         &kp AT
&kt LEFT_WIN     &kp APOS  &kp LEFT           &kp DOWN      &kp RIGHT     &kp RPAR    &kp NON_US_BACKSLASH  &kp GREATER_THAN  &kp RBRC      &kp LPAR      &kp UNDER     &kp APOS
                                              &trans        &trans        &trans      &trans                &trans
            >;
        };

        Num_Fun {
            bindings = <
&bt BT_CLR    &none  &kp F1  &kp F2   &kp F3   &kp F4     &kp DQT      &kp N7        &kp N8        &kp N9        &kp SLASH  &kp NON_US_BSLH
&none         &none  &kp F5  &kp F6   &kp F7   &kp F8     &kp MINUS    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0     &kp EQUAL
&out OUT_TOG  &none  &kp F9  &kp F10  &kp F11  &kp F12    &kp KP_PLUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp UNDER  &kp PLUS
                             &trans   &trans   &trans     &trans       &trans
            >;
        };

        NOUSE {
            bindings = <
&trans  &trans   &kp F1  &kp F2   &kp F3   &kp F4     &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&trans  &kp DEL  &kp F5  &kp F6   &kp F7   &kp F8     &out OUT_TOG  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &kp LALT
&trans  &trans   &kp F9  &kp F10  &kp F11  &kp F12    &trans        &trans            &trans             &trans           &trans        &to 0
                         &trans   &trans   &trans     &trans        &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &none       &none      &none      &none      &none  &none
&trans  &trans  &trans  &trans  &trans  &trans    &none       &none      &mkp LCLK  &mkp RCLK  &none  &none
&trans  &trans  &trans  &trans  &trans  &trans    &none       &mkp MB3   &none      &trans     &none  &kp RC(C)
                        &trans  &trans  &trans    &kp ESCAPE  &kp RC(X)
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
